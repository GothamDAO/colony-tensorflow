'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _colonyJsContractClient = require('@colony/colony-js-contract-client');

var _colonyJsContractClient2 = _interopRequireDefault(_colonyJsContractClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GetTokenInfo = function (_ContractClient$Calle) {
  (0, _inherits3.default)(GetTokenInfo, _ContractClient$Calle);

  function GetTokenInfo(params) {
    (0, _classCallCheck3.default)(this, GetTokenInfo);
    return (0, _possibleConstructorReturn3.default)(this, (GetTokenInfo.__proto__ || Object.getPrototypeOf(GetTokenInfo)).call(this, (0, _extends3.default)({
      functionName: 'getTokenInfo',
      input: [],
      output: [['name', 'string'], ['symbol', 'string'], ['decimals', 'number']]
    }, params)));
  }

  (0, _createClass3.default)(GetTokenInfo, [{
    key: 'call',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var name, symbol, decimals, callResult;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getValueFor('name');

              case 2:
                name = _context.sent;
                _context.next = 5;
                return this.getValueFor('symbol');

              case 5:
                symbol = _context.sent;
                _context.next = 8;
                return this.getValueFor('decimals');

              case 8:
                decimals = _context.sent;
                callResult = [name, symbol, decimals];
                return _context.abrupt('return', this.convertOutputValues(callResult));

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function call() {
        return _ref.apply(this, arguments);
      }

      return call;
    }()
  }, {
    key: 'getValueFor',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(prop) {
        var data;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                data = void 0;
                _context2.prev = 1;
                _context2.next = 4;
                return this.client.call(prop, []);

              case 4:
                data = _context2.sent;
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2['catch'](1);

                data = null;

              case 10:
                return _context2.abrupt('return', data);

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 7]]);
      }));

      function getValueFor(_x) {
        return _ref2.apply(this, arguments);
      }

      return getValueFor;
    }()
  }]);
  return GetTokenInfo;
}(_colonyJsContractClient2.default.Caller);
/* eslint-disable no-underscore-dangle */

exports.default = GetTokenInfo;
//# sourceMappingURL=GetTokenInfo.js.map