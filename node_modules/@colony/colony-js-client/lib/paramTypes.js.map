{"version":3,"sources":["../src/paramTypes.js"],"names":["roleType","roles","validate","value","Object","hasOwnProperty","call","convertInput","convertOutput","converted","toNumber","keys","find","name"],"mappings":";;AAEA;;AACA;;AACA;;AAEA;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,KAAD;AAAA,SAA4C;AAC3DC,YAD2D,oBAClDC,KADkD,EACtC;AACnB,aAAOC,OAAOC,cAAP,CAAsBC,IAAtB,CAA2BL,KAA3B,EAAkCE,KAAlC,CAAP;AACD,KAH0D;AAI3DI,gBAJ2D,wBAI9CJ,KAJ8C,EAIlB;AACvC,aAAOF,MAAME,KAAN,CAAP;AACD,KAN0D;AAO3DK,iBAP2D,yBAO7CL,KAP6C,EAOjC;AACxB,UAAIM,kBAAJ;AACA,UAAI,4BAAYN,KAAZ,CAAJ,EAAwB;AACtBM,oBAAY,4BAAYN,KAAZ,CAAZ;AACD,OAFD,MAEO,IAAI,gCAAYA,KAAZ,CAAJ,EAAwB;AAC7BM,oBAAYN,MAAMO,QAAN,EAAZ;AACD,OAFM,MAEA;AACLD,oBAAYN,KAAZ;AACD;AACD,aAAOC,OAAOO,IAAP,CAAYV,KAAZ,EAAmBW,IAAnB,CAAwB;AAAA,eAAQX,MAAMY,IAAN,MAAgBJ,SAAxB;AAAA,OAAxB,KAA8D,IAArE;AACD;AAjB0D,GAA5C;AAAA,CAAjB;;AAoBA,0CAAa,MAAb,EAAqBT,0BAArB;;AAEA,0CAAa,eAAb,EAA8BA,oCAA9B","file":"paramTypes.js","sourcesContent":["/* @flow */\n\nimport { isBigNumber } from '@colony/colony-js-utils';\nimport { isHexStrict, hexToNumber } from 'web3-utils';\nimport { addParamType } from '@colony/colony-js-contract-client';\n\nimport { ROLES, AUTHORITY_ROLES } from './constants';\n\nconst roleType = (roles: { [roleName: string]: number }) => ({\n  validate(value: any) {\n    return Object.hasOwnProperty.call(roles, value);\n  },\n  convertInput(value: $Keys<typeof roles>) {\n    return roles[value];\n  },\n  convertOutput(value: any) {\n    let converted;\n    if (isHexStrict(value)) {\n      converted = hexToNumber(value);\n    } else if (isBigNumber(value)) {\n      converted = value.toNumber();\n    } else {\n      converted = value;\n    }\n    return Object.keys(roles).find(name => roles[name] === converted) || null;\n  },\n});\n\naddParamType('role', roleType(ROLES));\n\naddParamType('authorityRole', roleType(AUTHORITY_ROLES));\n"]}